#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telethon import TelegramClient, events, utils
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import User, Channel, InputPeerUser, InputPeerChannel, UserStatusOnline, UserStatusOffline, UserStatusRecently
import asyncio
import logging
import sys
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("online_tracker.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
API_ID = 12345  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
API_HASH = 'your_api_hash'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
SESSION_NAME = 'user1'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é

# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–±–µ–∑ @) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
TARGET_USER = "nikonikto"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @) –∏–ª–∏ –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
NOTIFICATION_USER = "@lavrehin"  # "me" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º–æ–º—É —Å–µ–±–µ

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CHECK_INTERVAL = 15
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_status = {
    'online': False,
    'last_seen': None,
    'entity': None
}

async def send_notification(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await client.send_message(NOTIFICATION_USER, message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def get_user_entity():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        entity = await client.get_entity(TARGET_USER)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É—â–Ω–æ—Å—Ç—å - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
        if not isinstance(entity, User):
            if isinstance(entity, Channel):
                logger.error(f"–û—à–∏–±–∫–∞: {TARGET_USER} - —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
                await send_notification(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {TARGET_USER} - —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞: {TARGET_USER} - —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
                await send_notification(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {TARGET_USER} - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return None
            
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entity.first_name} {entity.last_name or ''} (ID: {entity.id})")
        return entity
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await send_notification(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TARGET_USER}: {str(e)}")
        return None

async def check_user_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏."""
    try:
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –µ—ë
        if user_status['entity'] is None:
            user_status['entity'] = await get_user_entity()
            if user_status['entity'] is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å)
        full_user = await client(GetFullUserRequest(user_status['entity']))
        user = full_user.users[0]
        status = user.status
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        user_name = user.first_name
        if user.last_name:
            user_name += " " + user.last_name
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}: {type(status).__name__}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_online = isinstance(status, UserStatusOnline)
        
        if is_online:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
            if not user_status['online']:
                user_status['online'] = True
                current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                await send_notification(
                    f"‚úÖ {user_name} —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω! ({current_time})"
                )
                logger.info(f"{user_name} –≤–æ—à–µ–ª –≤ —Å–µ—Ç—å –≤ {current_time}")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω
            if user_status['online']:
                user_status['online'] = False
                
                if isinstance(status, UserStatusOffline) and hasattr(status, 'was_online'):
                    last_seen = status.was_online
                    user_status['last_seen'] = last_seen
                    last_seen_str = last_seen.strftime("%d.%m.%Y %H:%M:%S")
                    offline_msg = f"‚ùå {user_name} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –æ–Ω–ª–∞–π–Ω: {last_seen_str}"
                elif isinstance(status, UserStatusRecently):
                    offline_msg = f"‚ùå {user_name} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏\n–ë—ã–ª –≤ —Å–µ—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ"
                else:
                    offline_msg = f"‚ùå {user_name} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏\n–°—Ç–∞—Ç—É—Å: {type(status).__name__}"
                
                await send_notification(offline_msg)
                logger.info(f"{user_name} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏. –°—Ç–∞—Ç—É—Å: {type(status).__name__}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º —Å–±—Ä–æ—Å–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
        user_status['entity'] = None
        await asyncio.sleep(10)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_notification(f"üîç –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TARGET_USER}")
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await check_user_status()
        
        # –í—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        while True:
            await asyncio.sleep(CHECK_INTERVAL)
            await check_user_status()
    except KeyboardInterrupt:
        logger.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await send_notification("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await send_notification(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ: {str(e)}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    
    with client:
        logger.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TARGET_USER}")
        client.loop.run_until_complete(main())