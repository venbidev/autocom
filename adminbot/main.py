from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ContentType
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
import asyncio
import os
import sys
from dotenv import load_dotenv
from telethon import TelegramClient
import boto3
from telethon.tl import types
import json

# Add parent directory to sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Now you can import the database module
from database.db import Session, engine
from database.models import UserBot

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN_ADMIN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# AWS S3 (Bucketeer) configuration
AWS_BUCKET_NAME = os.getenv("BUCKETEER_BUCKET_NAME")
AWS_ACCESS_KEY_ID = os.getenv("BUCKETEER_AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("BUCKETEER_AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("BUCKETEER_REGION")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@dp.message(CommandStart())
async def start_cmd(message: Message):
    if not is_admin(message.from_user.id):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã")]],
        resize_keyboard=True
    )

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å?", reply_markup=keyboard)

@dp.message(F.text == "–ê–∫–∫–∞—É–Ω—Ç—ã")
async def handle_accounts_button(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if not is_admin(message.from_user.id):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")],
            [KeyboardButton(text="–°—Ç–∞—Ç—É—Å")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
async def handle_manage_accounts_button(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if not is_admin(message.from_user.id):
        return

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...", reply_markup=ReplyKeyboardRemove())

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:", reply_markup=keyboard)
    print("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def handle_add_button(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if not is_admin(message.from_user.id):
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏.")

@dp.message(F.content_type == ContentType.DOCUMENT)
async def handle_session_file(message: Message):
    print("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç")
    if not is_admin(message.from_user.id):
        return

    document = message.document

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    local_path = f"adminbot/sessions/{document.file_name}"
    
    # Ensure the sessions directory exists
    os.makedirs("adminbot/sessions", exist_ok=True)
    
    # Fix: Use bot.download() instead of document.download()
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, local_path)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é Telethon –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è api_id –∏ api_hash
    client = TelegramClient(local_path, api_id=1, api_hash="1")

    try:
        await client.connect()
        if not await client.is_user_authorized():
            await message.answer("–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞
        me = await client.get_me()
        account_id = me.id
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ —é–∑–µ—Ä–±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            # –Ω–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getDialogs() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞
            dialogs = await client.get_dialogs()
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º ID –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
            admin_found = False
            for dialog in dialogs:
                if dialog.entity.id == ADMIN_ID:
                    await client.send_message(dialog.entity, f"–ü—Ä–∏–≤–µ—Ç! –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –ú–æ–π ID: {account_id}")
                    admin_found = True
                    break
            
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–∞—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ ID
            if not admin_found:
                # –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ API
                # –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
                    admin = await client.get_entity(ADMIN_ID)
                    await client.send_message(admin, f"–ü—Ä–∏–≤–µ—Ç! –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –ú–æ–π ID: {account_id}")
                    admin_found = True
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ: {e}")
            
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not admin_found:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º
                await client.send_message(ADMIN_ID, f"–ü—Ä–∏–≤–µ—Ç! –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –ú–æ–π ID: {account_id}")
                
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, ID: {account_id}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, ID: {account_id}, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {str(e)}")

    finally:
        await client.disconnect()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–∫–µ—Ç –Ω–∞ Heroku
    s3 = boto3.client(
        's3',
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
        region_name=AWS_REGION
    )
    bucket_name = AWS_BUCKET_NAME
    s3_key = f"sessions/{document.file_name}"

    s3.upload_file(local_path, bucket_name, s3_key)
    heroku_url = f"https://{bucket_name}.s3.{AWS_REGION}.amazonaws.com/{s3_key}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∂–µ account_id
    existing_userbot = session.query(UserBot).filter(UserBot.account_id == account_id).first()
    
    if (existing_userbot):
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        session.delete(existing_userbot)
        session.commit()
        await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ –±–∞–∑–µ –∏ –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    new_userbot = UserBot(
        owner_id=message.from_user.id,
        account_id=account_id,
        session_name=heroku_url
    )
    session.add(new_userbot)
    session.commit()
    session.close()

    await message.answer(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, ID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_id}. –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥.")

@dp.message(F.text == "–°—Ç–∞—Ç—É—Å")
async def handle_status_button(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if not is_admin(message.from_user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    userbots = session.query(UserBot).all()
    
    if not userbots:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        session.close()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_reply = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã")]
        ],
        resize_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    await message.answer("üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", reply_markup=keyboard_reply)
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π
    for i, userbot in enumerate(userbots, 1):
        account_info = f"{i}. ID –∞–∫–∫–∞—É–Ω—Ç–∞: {userbot.account_id}\n"
        account_info += f"   –î–æ–±–∞–≤–ª–µ–Ω: {userbot.created_at}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"check_session:{userbot.id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
        await message.answer(account_info, reply_markup=inline_kb)
    
    session.close()

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å")
async def handle_delete_button(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if not is_admin(message.from_user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    userbots = session.query(UserBot).all()
    
    if not userbots:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã")]],
            resize_keyboard=True
        )
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=keyboard)
        session.close()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    for i, userbot in enumerate(userbots, 1):
        account_info = f"{i}. ID –∞–∫–∫–∞—É–Ω—Ç–∞: {userbot.account_id}\n"
        account_info += f"   –î–æ–±–∞–≤–ª–µ–Ω: {userbot.created_at}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"delete_account:{userbot.id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
        await message.answer(account_info, reply_markup=inline_kb)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_reply = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥", reply_markup=keyboard_reply)
    session.close()

@dp.callback_query(lambda call: call.data.startswith("delete_account:"))
async def delete_account_callback(call: CallbackQuery):
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫: {call.data}")
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    userbot_id = int(call.data.split(":")[1])
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å —É–¥–∞–ª–µ–Ω–∏–µ
    await call.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è...")
    await call.message.edit_text(call.message.text + "\n\nüîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...", reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    userbot = session.query(UserBot).filter(UserBot.id == userbot_id).first()
    
    if not userbot:
        await call.message.edit_text(call.message.text + "\n\n‚ùå –û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        session.close()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Å—Å–∏–∏ –∏ –∏–º—è —Ñ–∞–π–ª–∞
        session_url = userbot.session_name
        session_filename = session_url.split("/")[-1]
        local_path = f"adminbot/sessions/{session_filename}"
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
        try:
            s3 = boto3.client(
                's3',
                aws_access_key_id=AWS_ACCESS_KEY_ID,
                aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                region_name=AWS_REGION
            )
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ URL –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç https://<bucket>.s3.<region>.amazonaws.com/sessions/<filename>
            session_key = f"sessions/{session_filename}"
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
            s3.delete_object(Bucket=AWS_BUCKET_NAME, Key=session_key)
            s3_deleted = True
            
        except Exception as e:
            s3_deleted = False
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ S3: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(local_path):
            try:
                os.remove(local_path)
                local_deleted = True
            except Exception as e:
                local_deleted = False
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        else:
            local_deleted = True  # –§–∞–π–ª–∞ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–º
            
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        account_id = userbot.account_id
        session.delete(userbot)
        session.commit()
        db_deleted = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        result_message = f"{call.message.text.split('üîÑ')[0]}\n\n‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        if not s3_deleted:
            result_message += "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–∑ –æ–±–ª–∞–∫–∞."
        if not local_deleted:
            result_message += "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await call.message.edit_text(result_message)
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        await call.message.edit_text(
            call.message.text.split("\n\n")[0] + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )
    finally:
        session.close()

@dp.callback_query(lambda call: call.data.startswith("check_session:"))
async def check_session_callback(call: CallbackQuery):
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫: {call.data}")
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    userbot_id = int(call.data.split(":")[1])
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞
    await call.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞—á–∞—Ç–∞...")
    await call.message.edit_text(call.message.text + "\n\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...", reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    userbot = session.query(UserBot).filter(UserBot.id == userbot_id).first()
    
    if not userbot:
        await call.message.edit_text(call.message.text + "\n\n‚ùå –û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        session.close()
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ S3
        s3 = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_REGION
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        session_filename = userbot.session_name.split("/")[-1]
        local_path = f"adminbot/sessions/{session_filename}"
        
        # Ensure sessions directory exists
        os.makedirs("adminbot/sessions", exist_ok=True)
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ URL –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç https://<bucket>.s3.<region>.amazonaws.com/sessions/<filename>
        session_key = f"sessions/{session_filename}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            # Define local_path before using it
            local_path = f"adminbot/sessions/{session_filename}"
            s3.download_file(AWS_BUCKET_NAME, session_key, local_path)
        except Exception as e:
            await call.message.edit_text(
                call.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {str(e)}"
            )
            session.close()
            return
        
        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        client = TelegramClient(local_path.replace(".session", ""), api_id=1, api_hash="1")
        
        try:
            await client.connect()
            
            if await client.is_user_authorized():
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await client.get_me()
                status = f"‚úÖ –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {me.first_name}"
                if me.username:
                    status += f"\nUsername: @{me.username}"
                if me.phone:
                    status += f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–±–ª–æ–∫
                await call.message.edit_text(
                    call.message.text.split("\n\n")[0] + f"\n\n{status}\n\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–±–ª–æ–∫..."
                )
                
                try:
                    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    test_chat_user = "SpamBot"  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ SpamBot –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
                        spam_bot = None
                        dialogs = await client.get_dialogs(limit=100)
                        for dialog in dialogs:
                            if dialog.entity.username == test_chat_user:
                                spam_bot = dialog.entity
                                break
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö, –∏—â–µ–º –ø–æ username
                        if not spam_bot:
                            spam_bot = await client.get_entity(test_chat_user)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ /start —Å–ø–∞–º-–±–æ—Ç—É
                        await client.send_message(spam_bot, "/start")
                        
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ø–∞–º-–±–æ—Ç–∞
                        timeout = 5  # —Å–µ–∫—É–Ω–¥
                        start_time = asyncio.get_event_loop().time()
                        spam_status = "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SpamBot)"
                        
                        # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç SpamBot
                        while (asyncio.get_event_loop().time() - start_time) < timeout:
                            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SpamBot
                            async for message in client.iter_messages(spam_bot, limit=1):
                                if message.date.timestamp() > start_time:
                                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ–∂–µ–µ (–ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
                                    spam_message = message.text.lower()
                                    
                                    if "good news" in spam_message or "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in spam_message:
                                        spam_status = "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                                    elif "—Å–ø–∞–º" in spam_message or "spam" in spam_message:
                                        spam_status = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –≤–æ–∑–º–æ–∂–µ–Ω —Å–ø–∞–º-–±–ª–æ–∫"
                                    else:
                                        spam_status = f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç SpamBot –ø–æ–ª—É—á–µ–Ω: {message.text[:100]}..."
                                    
                                    break
                            
                            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å, –≤—ã—Ö–æ–¥–∏–º
                            if spam_status != "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SpamBot)":
                                break
                                
                            await asyncio.sleep(0.5)
                            
                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ SpamBot –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                        details = ""
                        if "‚ö†Ô∏è" not in spam_status:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                            async for message in client.iter_messages(spam_bot, limit=1):
                                if message.date.timestamp() > start_time:
                                    details = f"\n\n–î–µ—Ç–∞–ª–∏ –æ—Ç SpamBot:\n{message.text}"
                        
                        status += f"\n\nüëÆ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-–±–ª–æ–∫–∞: {spam_status}{details}"
                    except Exception as e:
                        status += f"\n\nüëÆ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-–±–ª–æ–∫–∞: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"
                except Exception as e:
                    status += f"\n\nüëÆ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-–±–ª–æ–∫–∞: ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {str(e)}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–æ–≤–∞", callback_data=f"check_session:{userbot_id}")],
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–∞–º-–±–ª–æ–∫", callback_data=f"check_spam:{userbot_id}")]
                ])
                
                await call.message.edit_text(
                    call.message.text.split("\n\n")[0] + f"\n\n{status}",
                    reply_markup=inline_kb
                )
            else:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
                await call.message.edit_text(
                    call.message.text.split("\n\n")[0] + "\n\n‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–æ–≤–∞", callback_data=f"check_session:{userbot_id}")]
                    ])
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            await call.message.edit_text(
                call.message.text.split("\n\n")[0] + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–æ–≤–∞", callback_data=f"check_session:{userbot_id}")]
                ])
            )
        finally:
            await client.disconnect()
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        await call.message.edit_text(
            call.message.text.split("\n\n")[0] + f"\n\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–æ–≤–∞", callback_data=f"check_session:{userbot_id}")]
            ])
        )
    finally:
        session.close()

@dp.callback_query(lambda call: call.data.startswith("check_spam:"))
async def check_spam_callback(call: CallbackQuery):
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫: {call.data}")
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    userbot_id = int(call.data.split(":")[1])
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞
    await call.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–±–ª–æ–∫ –Ω–∞—á–∞—Ç–∞...")
    await call.message.edit_text(call.message.text + "\n\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–±–ª–æ–∫...", reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session(bind=engine)
    userbot = session.query(UserBot).filter(UserBot.id == userbot_id).first()
    
    if not userbot:
        await call.message.edit_text(call.message.text + "\n\n‚ùå –û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        session.close()
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ S3
        s3 = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_REGION
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        session_filename = userbot.session_name.split("/")[-1]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            s3.download_file(AWS_BUCKET_NAME, session_key, local_path)
        except Exception as e:
            await call.message.edit_text(
                call.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {str(e)}"
            )
            session.close()
            return
        
        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        client = TelegramClient(local_path.replace(".session", ""), api_id=1, api_hash="1")
        
        try:
            await client.connect()
            
            if await client.is_user_authorized():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–±–ª–æ–∫
                try:
                    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    test_chat_user = "SpamBot"  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ SpamBot –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
                        spam_bot = None
                        dialogs = await client.get_dialogs(limit=100)
                        for dialog in dialogs:
                            if dialog.entity.username == test_chat_user:
                                spam_bot = dialog.entity
                                break
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö, –∏—â–µ–º –ø–æ username
                        if not spam_bot:
                            spam_bot = await client.get_entity(test_chat_user)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ /start —Å–ø–∞–º-–±–æ—Ç—É
                        await client.send_message(spam_bot, "/start")
                        
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ø–∞–º-–±–æ—Ç–∞
                        timeout = 5  # —Å–µ–∫—É–Ω–¥
                        start_time = asyncio.get_event_loop().time()
                        spam_status = "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SpamBot)"
                        
                        # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç SpamBot
                        while (asyncio.get_event_loop().time() - start_time) < timeout:
                            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SpamBot
                            async for message in client.iter_messages(spam_bot, limit=1):
                                if message.date.timestamp() > start_time:
                                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ–∂–µ–µ (–ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
                                    spam_message = message.text.lower()
                                    
                                    if "good news" in spam_message or "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in spam_message:
                                        spam_status = "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                                    elif "—Å–ø–∞–º" in spam_message or "spam" in spam_message:
                                        spam_status = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –≤–æ–∑–º–æ–∂–µ–Ω —Å–ø–∞–º-–±–ª–æ–∫"
                                    else:
                                        spam_status = f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç SpamBot –ø–æ–ª—É—á–µ–Ω: {message.text[:100]}..."
                                    
                                    break
                            
                            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å, –≤—ã—Ö–æ–¥–∏–º
                            if spam_status != "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SpamBot)":
                                break
                                
                            await asyncio.sleep(0.5)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ SpamBot –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                        details = ""
                        if "‚ö†Ô∏è" not in spam_status:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                            async for message in client.iter_messages(spam_bot, limit=1):
                                if message.date.timestamp() > start_time:
                                    details = f"\n\n–î–µ—Ç–∞–ª–∏ –æ—Ç SpamBot:\n{message.text}"
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")],
                            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫ —Å–Ω–æ–≤–∞", callback_data=f"check_spam:{userbot_id}")]
                        ])
                        
                        await call.message.edit_text(
                            call.message.text.split("\n\nüîÑ")[0] + f"\n\nüëÆ‚Äç‚ôÇÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {spam_status}{details}",
                            reply_markup=inline_kb
                        )
                        
                    except Exception as e:
                        await call.message.edit_text(
                            call.message.text.split("\n\nüîÑ")[0] + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∞–º-–±–ª–æ–∫–∞: {str(e)}",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")],
                                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫ —Å–Ω–æ–≤–∞", callback_data=f"check_spam:{userbot_id}")]
                            ])
                        )
                except Exception as e:
                    await call.message.edit_text(
                        call.message.text.split("\n\nüîÑ")[0] + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∞–º-–±–ª–æ–∫–∞: {str(e)}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")],
                            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫ —Å–Ω–æ–≤–∞", callback_data=f"check_spam:{userbot_id}")]
                        ])
                    )
            else:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
                await call.message.edit_text(
                    call.message.text.split("\n\nüîÑ")[0] + "\n\n‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")]
                    ])
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            await call.message.edit_text(
                call.message.text.split("\n\nüîÑ")[0] + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")],
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫ —Å–Ω–æ–≤–∞", callback_data=f"check_spam:{userbot_id}")]
                ])
            )
        finally:
            await client.disconnect()
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        await call.message.edit_text(
            call.message.text.split("\n\nüîÑ")[0] + f"\n\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"check_session:{userbot_id}")],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫ —Å–Ω–æ–≤–∞", callback_data=f"check_spam:{userbot_id}")]
            ])
        )
    finally:
        session.close()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
