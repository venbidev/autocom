from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
import random
import sys
import logging
import traceback
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_log.txt"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv
from datetime import datetime, timedelta
from database.db import Session
from database.models import User, Campaign, UserBot
from sqlalchemy import and_, or_, not_, func
import io
import re
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
from userbot_manager import update_bot_profile, check_channel_admin, add_channel_to_profile, check_userbot_availability

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏")],
            [KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞
def get_target_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"), KeyboardButton(text="–ï–¥–∞")],
            [KeyboardButton(text="–ú–æ–¥–∞"), KeyboardButton(text="–°–ø–æ—Ä—Ç")],
            [KeyboardButton(text="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"), KeyboardButton(text="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="–§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton(text="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def get_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel")
            ]
        ]
    )
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
class CampaignStates(StatesGroup):
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_payment = State()
    # –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    waiting_for_name = State()
    waiting_for_target = State()
    waiting_for_bot_name = State()
    waiting_for_bot_avatar = State()
    waiting_for_bot_description = State()
    waiting_for_channel_username = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ username
    waiting_for_channel_confirmation = State()
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    waiting_for_final_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user_id: int, username: str = None) -> User:
    session = Session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                username=username,
                balance=0.0
            )
            session.add(user)
            session.commit()
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id}, {username}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        user_data = {
            'telegram_id': user.telegram_id,
            'username': user.username,
            'balance': user.balance,
            'id': user.id
        }
        
        return user_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
        return None
        session.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_balance(user_id: int) -> float:
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            return user.balance
        return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return 0.0
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def add_balance(user_id: int, amount: float) -> bool:
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.balance += amount
            session.commit()
            return True
        return False–∫—Ä—É—Ç–æ–π0–≥—É—Ä–µ—Ü
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        session.rollback()
        return False
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞
async def get_free_userbot():
    session = Session()
    try:
        free_userbot = session.query(UserBot).filter(UserBot.isoccupied == False).order_by(func.random()).first()
        return free_userbot
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞: {e}")
        return None
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞
async def update_userbot_status(bot_id: int, is_occupied: bool, new_name: str = None):
    session = Session()
    try:
        userbot = session.query(UserBot).filter(UserBot.id == bot_id).first()
        if userbot:
            userbot.isoccupied = is_occupied
            if new_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º display_name –≤–º–µ—Å—Ç–æ session_name
                userbot.display_name = new_name
            session.commit()
            return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞: {e}")
        session.rollback()
        return False
    finally:
        session.close()

@dp.message(CommandStart())
async def start_cmd(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    user_data = await register_user(
        user_id=message.from_user.id,
        username=message.from_user.username
    )
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ Telegram.\n"
        f"–Ø —É–º–µ—é –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É.)\n\n"
    )
    
    if user_data:
        welcome_text += f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±.\n"
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
@dp.message(Command("new_campaign"))
async def new_campaign_cmd(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π (—Å–≤–æ–±–æ–¥–Ω—ã–π) —é–∑–µ—Ä–±–æ—Ç
    free_userbot = await get_free_userbot()
    
    if not free_userbot:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–∑–µ—Ä–±–æ—Ç–µ
    await state.update_data(userbot_id=free_userbot.id, userbot_username=free_userbot.session_name)
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    campaign_cost = 10.0
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = Session()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ", callback_data="pay_campaign")]
        ]
    )
    
    if user and user.balance >= campaign_cost:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        await message.answer(
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ 10‚ÇΩ.\n"
            f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {user.balance}‚ÇΩ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard
        )
    else:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        balance = user.balance if user else 0
        await message.answer(
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–±—É–µ—Ç—Å—è 10‚ÇΩ.\n"
            f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {balance}‚ÇΩ\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            f"(–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å 10‚ÇΩ –Ω–∞ –≤–∞—à —Å—á–µ—Ç)",
            reply_markup=payment_keyboard
        )
    
    session.close()
    await state.set_state(CampaignStates.waiting_for_payment)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
@dp.callback_query(F.data == "pay_campaign", CampaignStates.waiting_for_payment)
async def process_payment(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    campaign_cost = 10.0
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = Session()
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if not user:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.balance < campaign_cost:
        # –î–µ–º–æ-—Ä–µ–∂–∏–º: –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        await add_balance(user_id, campaign_cost)
        user = session.query(User).filter(User.telegram_id == user_id).first()
        await callback.message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {campaign_cost}‚ÇΩ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)")
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance -= campaign_cost
    session.commit()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–µ–¥–µ–ª—è)
    paid_until = datetime.now() + timedelta(days=7)
    await state.update_data(paid_until=paid_until)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —é–∑–µ—Ä–±–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
    data = await state.get_data()
    userbot_id = data.get("userbot_id")
    await update_userbot_status(userbot_id, True)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await callback.message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à—É –∫–∞–º–ø–∞–Ω–∏—é.")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º):")
    
    session.close()
    await callback.answer()
    await state.set_state(CampaignStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
@dp.message(CampaignStates.waiting_for_name)
async def process_campaign_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    await state.update_data(campaign_name=message.text)
    
    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤–∞—à –±–æ—Ç:",
        reply_markup=get_target_keyboard()
    )
    
    await state.set_state(CampaignStates.waiting_for_target)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(CampaignStates.waiting_for_target)
async def process_campaign_target(message: Message, state: FSMContext):
    valid_targets = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ï–¥–∞", "–ú–æ–¥–∞", "–°–ø–æ—Ä—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–§–∏–Ω–∞–Ω—Å—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]
    
    if message.text not in valid_targets:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_target_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(target=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await state.set_state(CampaignStates.waiting_for_bot_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(CampaignStates.waiting_for_bot_name)
async def process_bot_name(message: Message, state: FSMContext):
    bot_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    if len(bot_name) < 3 or len(bot_name) > 30:
        await message.answer(
            "–ò–º—è –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —é–∑–µ—Ä–±–æ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    userbot_id = data["userbot_id"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–æ—Ç–∞
    await state.update_data(bot_name=bot_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞
    is_available = await check_userbot_availability(userbot_id)
    if not is_available:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —é–∑–µ—Ä–±–æ—Ç–∞
        await update_userbot_status(userbot_id, False)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.clear()
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º –∏–º—è —é–∑–µ—Ä–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telethon API
    success = await update_bot_profile(userbot_id, first_name=bot_name)
    if not success:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_userbot_status(userbot_id, True, bot_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞:"
    )
    
    await state.set_state(CampaignStates.waiting_for_bot_avatar)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
@dp.message(F.photo, CampaignStates.waiting_for_bot_avatar)
async def process_bot_avatar(message: Message, state: FSMContext):
    data = await state.get_data()
    userbot_id = data["userbot_id"]
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    
    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
        await bot.download(photo.file_id, destination=temp_file.name)
        temp_path = temp_file.name
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∫ —é–∑–µ—Ä–±–æ—Ç—É —á–µ—Ä–µ–∑ Telethon API
        success = await update_bot_profile(userbot_id, photo_path=temp_path)
        
        if success:
            await message.answer(
                "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞ (–±–µ–∑ —Å—Å—ã–ª–æ–∫):"
            )
            await state.set_state(CampaignStates.waiting_for_bot_description)
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
            )
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.unlink(temp_path)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
@dp.message(CampaignStates.waiting_for_bot_avatar)
async def wrong_avatar_format(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
@dp.message(CampaignStates.waiting_for_bot_description)
async def process_bot_description(message: Message, state: FSMContext):
    description = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    if re.search(r'(https?://|www\.|\bt\.me/)', description, re.IGNORECASE):
        await message.answer(
            "–í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Å—ã–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
    if len(description) > 70:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(bot_description=description)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–±–æ—Ç–µ
    data = await state.get_data()
    userbot_id = data["userbot_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telethon API
    success = await update_bot_profile(userbot_id, bio=description)
    
    if not success:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏–∑ –ë–î
    session = Session()
    userbot = session.query(UserBot).filter(UserBot.id == userbot_id).first()
    session.close()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ:\n\n"
        f"1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ Telegram\n"
        f"2. –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª\n"
        f"3. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @{userbot.session_name} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞\n\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞
    channel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–Ø –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="check_admin")
            ],
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ]
    )
    
    await message.answer("–ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=channel_keyboard)
    await state.set_state(CampaignStates.waiting_for_channel_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
@dp.callback_query(F.data == "confirm", CampaignStates.waiting_for_channel_confirmation)
async def confirm_channel_setup(callback: CallbackQuery, state: FSMContext):
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['campaign_name']}\n"
        f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['target']}\n"
        f"ü§ñ –ò–º—è –±–æ—Ç–∞: {data['bot_name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞: {data['bot_description']}\n"
        f"üìÖ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {data['paid_until'].strftime('%d.%m.%Y')}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏."
    )
    
    await callback.message.answer(confirmation_text, reply_markup=get_confirmation_keyboard())
    await callback.answer()
    await state.set_state(CampaignStates.waiting_for_final_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
@dp.callback_query(F.data == "cancel", CampaignStates.waiting_for_channel_confirmation)
async def cancel_channel_setup(callback: CallbackQuery, state: FSMContext):
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —é–∑–µ—Ä–±–æ—Ç–∞
    data = await state.get_data()
    await update_userbot_status(data["userbot_id"], False)
    
    await callback.message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
        reply_markup=get_main_keyboard()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
    await add_balance(callback.from_user.id, 10.0)
    
    await callback.answer()
    await state.clear()

# –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
@dp.callback_query(F.data == "confirm", CampaignStates.waiting_for_final_confirmation)
async def create_campaign(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    session = Session()
    try:
        new_campaign = Campaign(
            creator_id=callback.from_user.id,
            name=data["campaign_name"],
            bot_id=data["userbot_id"],
            paid_until=data["paid_until"],
            target=data["target"]
        )
        
        session.add(new_campaign)
        session.commit()
        
        await callback.message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∫–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!\n"
            "–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏'.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {e}")
        session.rollback()
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —é–∑–µ—Ä–±–æ—Ç–∞
        await update_userbot_status(data["userbot_id"], False)
        
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
            reply_markup=get_main_keyboard()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
        await add_balance(callback.from_user.id, 10.0)
    finally:
        session.close()
    
    await callback.answer()
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ
@dp.callback_query(F.data == "cancel", CampaignStates.waiting_for_final_confirmation)
async def cancel_final_confirmation(callback: CallbackQuery, state: FSMContext):
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —é–∑–µ—Ä–±–æ—Ç–∞
    data = await state.get_data()
    await update_userbot_status(data["userbot_id"], False)
    
    await callback.message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
        reply_markup=get_main_keyboard()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
    await add_balance(callback.from_user.id, 10.0)
    
    await callback.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(lambda message: message.text == "–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏")
async def show_my_campaigns(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    session = Session()
    try:
        campaigns = session.query(Campaign).filter(
            Campaign.creator_id == message.from_user.id
        ).all()
        
        if not campaigns:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ /new_campaign",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        campaigns_text = "–í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏:\n\n"
        
        for i, campaign in enumerate(campaigns, start=1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
            bot = session.query(UserBot).filter(UserBot.id == campaign.bot_id).first()
            bot_name = bot.session_name if bot else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            paid_until_str = campaign.paid_until.strftime("%d.%m.%Y") if campaign.paid_until else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            
            campaigns_text += (
                f"{i}. {campaign.name}\n"
                f"   –ë–æ—Ç: {bot_name}\n"
                f"   –¶–µ–ª—å: {campaign.target}\n"
                f"   –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {paid_until_str}\n\n"
            )
        
        campaigns_text += "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ /campaign_{id}, –≥–¥–µ {id} - –Ω–æ–º–µ—Ä –∫–∞–º–ø–∞–Ω–∏–∏."
        
        await message.answer(campaigns_text, reply_markup=get_main_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π",
            reply_markup=get_main_keyboard()
        )
    finally:
        session.close()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ username –∫–∞–Ω–∞–ª–∞
@dp.callback_query(F.data == "check_admin", CampaignStates.waiting_for_channel_confirmation)
async def request_channel_username(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel):")
    await state.set_state(CampaignStates.waiting_for_channel_username)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ username
@dp.message(CampaignStates.waiting_for_channel_username)
async def check_admin_status(message: Message, state: FSMContext):
    channel_username = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
    if not channel_username.startswith('@'):
        await message.answer("Username –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username:")
        return
    
    # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    pure_username = channel_username[1:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∫–∞–Ω–∞–ª–∞
    await state.update_data(channel_username=channel_username)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–±–æ—Ç–µ
    data = await state.get_data()
    userbot_id = data["userbot_id"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä–±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telethon API
    is_admin = await check_channel_admin(userbot_id, pure_username)
    
    if not is_admin:
        await message.answer(
            f"–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_username}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:"
        )
        return
    
    # –ï—Å–ª–∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞
    success = await add_channel_to_profile(userbot_id, channel_username)
    
    if not success:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['campaign_name']}\n"
        f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['target']}\n"
        f"ü§ñ –ò–º—è –±–æ—Ç–∞: {data['bot_name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞: {data['bot_description']}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: {channel_username}\n"
        f"üìÖ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {data['paid_until'].strftime('%d.%m.%Y')}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏."
    )
    
    await message.answer(confirmation_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(CampaignStates.waiting_for_final_confirmation)

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if not BOT_TOKEN:
            logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
            return
        
        logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω, –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {BOT_TOKEN[:5]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        try:
            result = session.execute(text("SELECT 1")).scalar()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ: {result}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return
        finally:
            session.close()
            
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(traceback.format_exc())